//Method 1 (Insert elements of the first tree to the second):
// C++ program to Merge Two Balanced Binary Search Trees 
#include<bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child 
and a pointer to right child */
class node 
{ 
	public:
	int data; 
	node* left; 
	node* right; 
}; 

// A utility function to merge two sorted arrays into one 
int *merge(int arr1[], int arr2[], int m, int n); 

// A helper function that stores inorder
// traversal of a tree in inorder array 
void storeInorder(node* node, int inorder[],
							int *index_ptr); 

/* A function that constructs Balanced
Binary Search Tree from a sorted array 
See https://www.geeksforgeeks.org/sorted-array-to-balanced-bst/ */
node* sortedArrayToBST(int arr[], int start, int end); 

/* This function merges two balanced 
BSTs with roots as root1 and root2. 
m and n are the sizes of the trees respectively */
node* mergeTrees(node *root1, node *root2, int m, int n) 
{ 
	// Store inorder traversal of 
	// first tree in an array arr1[] 
	int *arr1 = new int[m]; 
	int i = 0; 
	storeInorder(root1, arr1, &i); 

	// Store inorder traversal of second
	// tree in another array arr2[] 
	int *arr2 = new int[n]; 
	int j = 0; 
	storeInorder(root2, arr2, &j); 

	// Merge the two sorted array into one 
	int *mergedArr = merge(arr1, arr2, m, n); 

	// Construct a tree from the merged 
	// array and return root of the tree 
	return sortedArrayToBST (mergedArr, 0, m + n - 1); 
} 

/* Helper function that allocates
a new node with the given data and 
NULL left and right pointers. */
node* newNode(int data) 
{ 
	node* Node = new node();
	Node->data = data; 
	Node->left = NULL; 
	Node->right = NULL; 

	return(Node); 
} 

// A utility function to print inorder
// traversal of a given binary tree 
void printInorder(node* node) 
{ 
	if (node == NULL) 
		return; 

	/* first recur on left child */
	printInorder(node->left); 

	cout << node->data << " "; 

	/* now recur on right child */
	printInorder(node->right); 
} 

// A utility function to merge
// two sorted arrays into one 
int *merge(int arr1[], int arr2[], int m, int n) 
{ 
	// mergedArr[] is going to contain result 
	int *mergedArr = new int[m + n]; 
	int i = 0, j = 0, k = 0; 

	// Traverse through both arrays 
	while (i < m && j < n) 
	{ 
		// Pick the smaller element and put it in mergedArr 
		if (arr1[i] < arr2[j]) 
		{ 
			mergedArr[k] = arr1[i]; 
			i++; 
		} 
		else
		{ 
			mergedArr[k] = arr2[j]; 
			j++; 
		} 
		k++; 
	} 

	// If there are more elements in first array 
	while (i < m) 
	{ 
		mergedArr[k] = arr1[i]; 
		i++; k++; 
	} 

	// If there are more elements in second array 
	while (j < n) 
	{ 
		mergedArr[k] = arr2[j]; 
		j++; k++; 
	} 

	return mergedArr; 
} 

// A helper function that stores inorder
// traversal of a tree rooted with node 
void storeInorder(node* node, int inorder[], int *index_ptr) 
{ 
	if (node == NULL) 
		return; 

	/* first recur on left child */
	storeInorder(node->left, inorder, index_ptr); 

	inorder[*index_ptr] = node->data; 
	(*index_ptr)++; // increase index for next entry 

	/* now recur on right child */
	storeInorder(node->right, inorder, index_ptr); 
} 

/* A function that constructs Balanced 
// Binary Search Tree from a sorted array 
See https://www.geeksforgeeks.org/sorted-array-to-balanced-bst/ */
node* sortedArrayToBST(int arr[], int start, int end) 
{ 
	/* Base Case */
	if (start > end) 
	return NULL; 

	/* Get the middle element and make it root */
	int mid = (start + end)/2; 
	node *root = newNode(arr[mid]); 

	/* Recursively construct the left subtree and make it 
	left child of root */
	root->left = sortedArrayToBST(arr, start, mid-1); 

	/* Recursively construct the right subtree and make it 
	right child of root */
	root->right = sortedArrayToBST(arr, mid+1, end); 

	return root; 
} 

/* Driver code*/
int main() 
{ 
	/* Create following tree as first balanced BST 
		100 
		/ \ 
		50 300 
	/ \ 
	20 70 
	*/
	node *root1 = newNode(100); 
	root1->left	 = newNode(50); 
	root1->right = newNode(300); 
	root1->left->left = newNode(20); 
	root1->left->right = newNode(70); 

	/* Create following tree as second balanced BST 
			80 
		/ \ 
		40 120 
	*/
	node *root2 = newNode(80); 
	root2->left	 = newNode(40); 
	root2->right = newNode(120); 

	node *mergedTree = mergeTrees(root1, root2, 5, 3); 

	cout << "Following is Inorder traversal of the merged tree \n"; 
	printInorder(mergedTree); 

	return 0; 
} 

// Method 2 (Merge Inorder Traversals):

// C++ Code for the above approach

#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data,
a pointer to left child
and a pointer to right child */
class Node {
public:
	int data;
	Node* left;
	Node* right;
};

// Function to return a new Node
Node* newNode(int data)
{
	Node* node = new Node();
	node->data = data;
	node->left = NULL;
	node->right = NULL;

	return (node);
}

// Function to convert bst to
// a doubly linked list
void bstTodll(Node* root, Node*& head)
{
	// if root is NULL
	if (!root)
		return;

	// Convert right subtree recursively
	bstTodll(root->right, head);

	// Update root
	root->right = head;

	// if head is not NULL
	if (head) {

		// Update left of the head
		head->left = root;
	}

	// Update head
	head = root;

	// Convert left subtree recursively
	bstTodll(root->left, head);
}

// Function to merge two sorted linked list
Node* mergeLinkedList(Node* head1, Node* head2)
{

	/*Create head and tail for result list*/
	Node* head = NULL;
	Node* tail = NULL;

	while (head1 && head2) {

		if (head1->data < head2->data) {

			if (!head)
				head = head1;
			else {

				tail->right = head1;
				head1->left = tail;
			}

			tail = head1;
			head1 = head1->right;
		}

		else {

			if (!head)
				head = head2;
			else {
				tail->right = head2;
				head2->left = tail;
			}

			tail = head2;
			head2 = head2->right;
		}
	}

	while (head1) {
		tail->right = head1;
		head1->left = tail;
		tail = head1;
		head1 = head1->right;
	}

	while (head2) {
		tail->right = head2;
		head2->left = tail;
		tail = head2;
		head2 = head2->right;
	}

	// Return the created DLL
	return head;
}

// function to convert list to bst
Node* sortedListToBST(Node*& head, int n)
{
	// if no element is left or head is null
	if (n <= 0 || !head)
		return NULL;

	// Create left part from the list recursively
	Node* left = sortedListToBST(head, n / 2);

	Node* root = head;
	root->left = left;
	head = head->right;

	// Create left part from the list recursively
	root->right = sortedListToBST(head, n - (n / 2) - 1);

	// Return the root of BST
	return root;
}

// This function merges two balanced BSTs
Node* mergeTrees(Node* root1, Node* root2, int m, int n)
{
	// Convert BSTs into sorted Doubly Linked Lists

	Node* head1 = NULL;
	bstTodll(root1, head1);
	head1->left = NULL;

	Node* head2 = NULL;
	bstTodll(root2, head2);
	head2->left = NULL;

	// Merge the two sorted lists into one
	Node* head = mergeLinkedList(head1, head2);

	// Construct a tree from the merged lists
	return sortedListToBST(head, m + n);
}

void printInorder(Node* node)
{
	// if current node is NULL
	if (!node) {
		return;
	}

	printInorder(node->left);

	// Print node of current data
	cout << node->data << " ";

	printInorder(node->right);
}

/* Driver code*/
int main()
{
	/* Create following tree as first balanced BST
	100
	/ \
	50 300
	/ \
	20 70 */

	Node* root1 = newNode(100);
	root1->left = newNode(50);
	root1->right = newNode(300);
	root1->left->left = newNode(20);
	root1->left->right = newNode(70);

	/* Create following tree as second balanced BST
			80
			/ \
		40 120
	*/
	Node* root2 = newNode(80);
	root2->left = newNode(40);
	root2->right = newNode(120);

	// Function Call
	Node* mergedTree = mergeTrees(root1, root2, 5, 3);

	cout << "Following is Inorder traversal of the merged "
			"tree \n";
	printInorder(mergedTree);

	return 0;
}



